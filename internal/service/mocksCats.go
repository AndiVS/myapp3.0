// Code generated by mockery v1.0.0. DO NOT EDIT.

package service

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/AndiVS/myapp3.0/internal/model"

import uuid "github.com/google/uuid"

// Cats is an autogenerated mock type for the Cats type
type MockCats struct {
	mock.Mock
}

// AddCat provides a mock function with given fields: c, rec
func (_m *MockCats) AddCat(c context.Context, cat *model.Cat) (uuid.UUID, error) {
	ret := _m.Called(c, cat)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cat) uuid.UUID); ok {
		r0 = rf(c, cat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Cat) error); ok {
		r1 = rf(c, cat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCat provides a mock function with given fields: c, id
func (_m *MockCats) DeleteCat(c context.Context, id uuid.UUID) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCat provides a mock function with given fields: c
func (_m *MockCats) GetAllCat(c context.Context) ([]*model.Cat, error) {
	ret := _m.Called(c)

	var r0 []*model.Cat
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Cat); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Cat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCat provides a mock function with given fields: c, id
func (_m *MockCats) GetCat(c context.Context, id uuid.UUID) (*model.Cat, error) {
	ret := _m.Called(c, id)

	var r0 model.Cat
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Cat); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Cat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return &r0, r1
}

// UpdateCat provides a mock function with given fields: c, rec
func (_m *MockCats) UpdateCat(c context.Context, cat *model.Cat) error {
	ret := _m.Called(c, cat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cat) error); ok {
		r0 = rf(c, cat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
