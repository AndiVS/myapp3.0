// Code generated by mockery v1.0.0. DO NOT EDIT.

package repository

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/AndiVS/myapp3.0/internal/model"

// Users is an autogenerated mock type for the Users type
type MockUsers struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: c, username
func (_m *MockUsers) DeleteUser(c context.Context, username string) error {
	ret := _m.Called(c, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: c, rec
func (_m *MockUsers) InsertUser(c context.Context, user *model.User) error {
	ret := _m.Called(c, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllUser provides a mock function with given fields: c
func (_m *MockUsers) SelectAllUser(c context.Context) ([]*model.User, error) {
	ret := _m.Called(c)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUser provides a mock function with given fields: c, username, password
func (_m *MockUsers) SelectUser(c context.Context, username string) (*model.User, error) {
	ret := _m.Called(c, username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: c, username, isAdmin
func (_m *MockUsers) UpdateUser(c context.Context, username string, isAdmin bool) error {
	ret := _m.Called(c, username, isAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(c, username, isAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
